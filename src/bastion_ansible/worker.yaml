---
- hosts: worker_node
  gather_facts: no
  vars_files:
    - variables.yml
  tasks: 

    - name: Bootstrap for worker
      become: yes
      ansible.builtin.apt:
        update_cache: yes
        name: 
          - socat
          - conntrack
          - ipset

    - name: Install Worker Binaries
      ansible.builtin.get_url:
        dest: ./
        backup: true
        url: "https://github.com/kubernetes-sigs/cri-tools/releases/download/v1.21.0/crictl-v1.21.0-linux-amd64.tar.gz"

    - name: Install Worker Binaries
      ansible.builtin.get_url:
        dest: ./
        backup: true
        url: "https://github.com/opencontainers/runc/releases/download/v1.0.0-rc93/runc.amd64"

    - name: Install Worker Binaries
      ansible.builtin.get_url:
        dest: ./
        backup: true
        url: "https://github.com/containernetworking/plugins/releases/download/v0.9.1/cni-plugins-linux-amd64-v0.9.1.tgz"

    - name: Install Worker Binaries
      ansible.builtin.get_url:
        dest: ./
        backup: true
        url: "https://github.com/containerd/containerd/releases/download/v1.4.4/containerd-1.4.4-linux-amd64.tar.gz"

    - name: Install Worker Binaries
      ansible.builtin.get_url:
        dest: ./
        backup: true
        url: "https://storage.googleapis.com/kubernetes-release/release/v1.24.0/bin/linux/amd64/kubectl"

    - name: Install Worker Binaries
      ansible.builtin.get_url:
        dest: ./
        backup: true
        url: "https://storage.googleapis.com/kubernetes-release/release/v1.24.0/bin/linux/amd64/kube-proxy"

    - name: Install Worker Binaries
      ansible.builtin.get_url:
        dest: ./
        backup: true
        url: "https://storage.googleapis.com/kubernetes-release/release/v1.24.0/bin/linux/amd64/kubelet"

    - name: make directory
      ansible.builtin.shell: sudo mkdir -p \
        /etc/cni/net.d \
        /opt/cni/bin \
        /var/lib/kubelet \
        /var/lib/kube-proxy \
        /var/lib/kubernetes \
        /var/run/kubernetes

    - name: Install the worker Binaries
      ansible.builtin.shell: |
        mkdir containerd
        tar -xvf crictl-v1.21.0-linux-amd64.tar.gz
        tar -xvf containerd-1.4.4-linux-amd64.tar.gz -C containerd
        sudo tar -xvf cni-plugins-linux-amd64-v0.9.1.tgz -C /opt/cni/bin/
        sudo mv runc.amd64 runc
        chmod +x crictl kubectl kube-proxy kubelet runc
        sudo mv crictl kubectl kube-proxy kubelet runc /usr/local/bin/
        sudo mv containerd/bin/* /bin/

    - name: create bridge file
      become: yes
      copy:
        dest: /etc/cni/net.d/10-bridge.conf
        content: |
          {
          "cniVersion": "0.4.0",
          "name": "bridge",
          "type": "bridge",
          "bridge": "cnio0",
          "isGateway": true,
          "ipMasq": true,
          "ipam": {
              "type": "host-local",
              "ranges": [
                [{"subnet": "172.100.0.0/24"}]
              ],
              "routes": [{"dst": "0.0.0.0/0"}]
          }

    - name: create network configration file
      become: yes
      copy:
        dest: /etc/cni/net.d/99-loopback.conf
        content: |
          {
          "cniVersion": "0.4.0",
          "name": "lo",
          "type": "loopback"
          }

    - name: make directory /etc/containerd/
      shell: sudo mkdir -p /etc/containerd/

    - name: make config.toml
      become: yes
      copy:
        dest: /etc/containerd/config.toml
        content: |
          [plugins]
          [plugins.cri.containerd]
            snapshotter = "overlayfs"
            [plugins.cri.containerd.default_runtime]
              runtime_type = "io.containerd.runtime.v1.linux"
              runtime_engine = "/usr/local/bin/runc"
              runtime_root = ""

    - name: make containerd.service file
      become: yes
      copy:
        dest: /etc/systemd/system/containerd.service
        content: |
          [Unit]
          Description=containerd container runtime
          Documentation=https://containerd.io
          After=network.target

          [Service]
          ExecStartPre=/sbin/modprobe overlay
          ExecStart=/bin/containerd
          Restart=always
          RestartSec=5
          Delegate=yes
          KillMode=process
          OOMScoreAdjust=-999
          LimitNOFILE=1048576
          LimitNPROC=infinity
          LimitCORE=infinity

          [Install]
          WantedBy=multi-user.target

    - name: configure kubelet
      shell: |
        sudo mv {{ worker_name }}-key.pem {{ worker_name }}.pem /var/lib/kubelet/
        sudo mv {{ worker_name }}.kubeconfig /var/lib/kubelet/kubeconfig
        sudo mv ca.pem /var/lib/kubernetes/

    - name: create kubelet-config.yaml
      become: yes
      copy:
        dest: /var/lib/kubelet/kubelet-config.yaml
        content: |
          kind: KubeletConfiguration
          apiVersion: kubelet.config.k8s.io/v1beta1
          authentication:
            anonymous:
              enabled: false
            webhook:
              enabled: true
            x509:
              clientCAFile: "/var/lib/kubernetes/ca.pem"
          authorization:
            mode: Webhook
          clusterDomain: "cluster.local"
          clusterDNS:
            - "10.32.0.10"
          podCIDR: "172.100.0.0/24"
          resolvConf: "/run/systemd/resolve/resolv.conf"
          runtimeRequestTimeout: "15m"
          tlsCertFile: "/var/lib/kubelet/{{ worker_name }}.pem"
          tlsPrivateKeyFile: "/var/lib/kubelet/{{ worker_name }}-key.pem"

    - name: create kubelet.service
      become: yes
      copy:
        dest: /etc/systemd/system/kubelet.service
        content: |
          [Unit]
          Description=Kubernetes Kubelet
          Documentation=https://github.com/kubernetes/kubernetes
          After=containerd.service
          Requires=containerd.service

          [Service]
          ExecStart=/usr/local/bin/kubelet \
            --config=/var/lib/kubelet/kubelet-config.yaml \
            --container-runtime=remote \
            --container-runtime-endpoint=unix:///var/run/containerd/containerd.sock \
            --kubeconfig=/var/lib/kubelet/kubeconfig \
            --register-node=true \
            --v=2
          Restart=on-failure
          RestartSec=5

          [Install]
          WantedBy=multi-user.target


    - name: Configure the kubernetes proxy
      become: yes
      ansible.builtin.command: mv kube-proxy.kubeconfig /var/lib/kube-proxy/kubeconfig


    - name: kubernetes proxy config
      become: yes
      copy:
        dest: /var/lib/kube-proxy/kube-proxy-config.yaml
        content: |
          kind: KubeProxyConfiguration
          apiVersion: kubeproxy.config.k8s.io/v1alpha1
          clientConnection:
            kubeconfig: "/var/lib/kube-proxy/kubeconfig"
          mode: "iptables"
          clusterCIDR: "172.100.0.0/16"

    - name: kubernetes proxy service
      become: yes
      copy:
        dest: /etc/systemd/system/kube-proxy.service
        content: |
          [Unit]
          Description=Kubernetes Kube Proxy
          Documentation=https://github.com/kubernetes/kubernetes

          [Service]
          ExecStart=/usr/local/bin/kube-proxy \
            --config=/var/lib/kube-proxy/kube-proxy-config.yaml
          Restart=on-failure
          RestartSec=5

          [Install]
          WantedBy=multi-user.target

    - name: start worker service
      become: yes
      ansible.builtin.shell: |
        systemctl daemon-reload
        systemctl enable containerd kubelet kube-proxy
        systemctl start containerd kubelet kube-proxy

    - name: update-alternatives --list iptables
      ansible.builtin.command: update-alternatives --list iptables

    - name: change Iptables alternatives
      become: yes
      ansible.builtin.command: update-alternatives --set iptables /usr/sbin/iptables-legacy

    - name: enabled IPv4
      become: yes
      ansible.builtin.command: sysctl -w net.ipv4.ip_forward=1

    - name: Configuration Persistence
      become: yes
      copy:
        dest: /etc/sysctl.d/99-kubernetes-cri.conf
        content: |
          net.ipv4.ip_forward= 1